#include <iostream>     // cout, endl
#include <fstream>      // fstream
#include <vector>
#include <string>
#include <algorithm>    // copy
#include <iterator>     // ostream_operator
#include <boost/tokenizer.hpp>

int main()
{
    using namespace std;
    using namespace boost;

	FILE *fid = fopen("model1.csv","r");
	vector<int> v1,v2;	
	while(!feof(fid))
	{
		int val1,val2;
		fscanf(fid,"%d,%d",&val1,&val2);
		v1.push_back(val1);
		v2.push_back(val2);
	}
	const int n = v1.size();
	int m[n][2];
	for(int i=0;i<n;i++)
	{
		m[i][0]=v1[i];
		m[i][1]=v2[i];
	}

	for(int i=0;i<n;i++)
		cout<<m[i][0]<<" "<<m[i][1]<<endl;
	return 0;

/*    string data("model1.csv");

    ifstream in(data.c_str());
    if (!in.is_open()) return 1;

    typedef tokenizer< escaped_list_separator<char> > Tokenizer;
    vector< string > vec;
vector <int> v0;
vector <int> v1;    
vector<vector <int> > main;    
string line;

    while (getline(in,line))
    {
        Tokenizer tok(line);
	
	vec.assign(tok.begin(), tok.end());
	v0.push_back (atoi(vec[0].c_str()));
	v1.push_back (atoi(vec[1].c_str()));
        //ora ho due vettori di interi
	 cout << vec[0] << " " << vec[1] << endl;

}
main.push_back(v0);
main.push_back(v1);

cout << "size v1: " << v1.size() << endl;
cout << "size v1 from main: " << main[1].size() << endl;
cout << "size main: " << main.size() << endl;
cout << "main e' un vettore di vettori di interi" << endl;


int value=14701;
int result=0;
for(int i=0; i< main[1].size(); i++){
cout << main[0][i] << " "<< main[1][i] << endl;
}

// result = 14700;


cout << "result " << result << endl;*/

return 0;
}	
