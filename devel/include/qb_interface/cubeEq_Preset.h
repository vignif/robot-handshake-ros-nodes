// Generated by gencpp from file qb_interface/cubeEq_Preset.msg
// DO NOT EDIT!


#ifndef QB_INTERFACE_MESSAGE_CUBEEQ_PRESET_H
#define QB_INTERFACE_MESSAGE_CUBEEQ_PRESET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace qb_interface
{
template <class ContainerAllocator>
struct cubeEq_Preset_
{
  typedef cubeEq_Preset_<ContainerAllocator> Type;

  cubeEq_Preset_()
    : eq()
    , preset()  {
    }
  cubeEq_Preset_(const ContainerAllocator& _alloc)
    : eq(_alloc)
    , preset(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _eq_type;
  _eq_type eq;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _preset_type;
  _preset_type preset;




  typedef boost::shared_ptr< ::qb_interface::cubeEq_Preset_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qb_interface::cubeEq_Preset_<ContainerAllocator> const> ConstPtr;

}; // struct cubeEq_Preset_

typedef ::qb_interface::cubeEq_Preset_<std::allocator<void> > cubeEq_Preset;

typedef boost::shared_ptr< ::qb_interface::cubeEq_Preset > cubeEq_PresetPtr;
typedef boost::shared_ptr< ::qb_interface::cubeEq_Preset const> cubeEq_PresetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::qb_interface::cubeEq_Preset_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::qb_interface::cubeEq_Preset_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace qb_interface

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'qb_interface': ['/home/francesco/ros_ws_handshake/src/qb_interface/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::qb_interface::cubeEq_Preset_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qb_interface::cubeEq_Preset_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qb_interface::cubeEq_Preset_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qb_interface::cubeEq_Preset_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qb_interface::cubeEq_Preset_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qb_interface::cubeEq_Preset_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::qb_interface::cubeEq_Preset_<ContainerAllocator> >
{
  static const char* value()
  {
    return "70c9b6b7a00b0977bdadaa889ac3c537";
  }

  static const char* value(const ::qb_interface::cubeEq_Preset_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x70c9b6b7a00b0977ULL;
  static const uint64_t static_value2 = 0xbdadaa889ac3c537ULL;
};

template<class ContainerAllocator>
struct DataType< ::qb_interface::cubeEq_Preset_<ContainerAllocator> >
{
  static const char* value()
  {
    return "qb_interface/cubeEq_Preset";
  }

  static const char* value(const ::qb_interface::cubeEq_Preset_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::qb_interface::cubeEq_Preset_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] eq\n\
float32[] preset\n\
";
  }

  static const char* value(const ::qb_interface::cubeEq_Preset_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::qb_interface::cubeEq_Preset_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.eq);
      stream.next(m.preset);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cubeEq_Preset_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::qb_interface::cubeEq_Preset_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::qb_interface::cubeEq_Preset_<ContainerAllocator>& v)
  {
    s << indent << "eq[]" << std::endl;
    for (size_t i = 0; i < v.eq.size(); ++i)
    {
      s << indent << "  eq[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.eq[i]);
    }
    s << indent << "preset[]" << std::endl;
    for (size_t i = 0; i < v.preset.size(); ++i)
    {
      s << indent << "  preset[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.preset[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // QB_INTERFACE_MESSAGE_CUBEEQ_PRESET_H
